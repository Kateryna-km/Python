openapi: 3.0.0
info:
  description: "This is Calendar API"
  version: "1.0.0"
  title: Calendar
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Kateryna-km/Calendar/1.0.0
  - url: 'https://eventcalendar.swagger.io/v2'
tags:
  - name: event
    description: Everything about your events
  - name: calendar
    description: Access to groups
  - name: user
    description: Operations about user
paths:
  /event:
    post:
      tags:
        - event
      summary: Add a new event to the calendar
      operationId: addEvent
      responses:
        '405':
          description: Invalid input
      security:
        - eventcalendar_auth:
            - 'write:events'
            - 'read:events'
      requestBody:
        $ref: '#/components/requestBodies/Event'
    put:
      tags:
        - event
      summary: Update an existing event
      operationId: updateEvent
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
        '405':
          description: Validation exception
      security:
        - eventcalendar_auth:
            - 'write:events'
            - 'read:events'
      requestBody:
        $ref: '#/components/requestBodies/Event'
  /event/findByDate:
    get:
      tags:
        - event
      summary: Finds Events by date
      description: Multiple date values can be provided with comma separated strings
      operationId: findEventsByDate
      parameters:
        - name: date
          in: query
          description: Date values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid date value
      security:
        - eventcalendar_auth:
            - 'write:events'
            - 'read:events'
  '/event/{eventId}':
    get:
      tags:
        - event
      summary: Find event by ID
      description: Returns a single event
      operationId: getEventById
      parameters:
        - name: eventId
          in: path
          description: ID of event to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
      security:
        - api_key: []
    post:
      tags:
        - event
      summary: Updates a event in the calendar with form data
      operationId: updateEventWithForm
      parameters:
        - name: eventId
          in: path
          description: ID of event that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - eventcalendar_auth:
            - 'write:events'
            - 'read:events'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the event
                  type: string
                status:
                  description: Updated date of the event
                  type: string
    delete:
      tags:
        - event
      summary: Deletes a event
      operationId: deleteEvent
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: eventId
          in: path
          description: Event id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
      security:
        - eventcalendar_auth:
            - 'write:events'
            - 'read:events'
  /calendar/group:
    post:
      tags:
        - calendar
      summary: Group of users for an event
      operationId: group
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
            application/xml:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid Group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        description: group of users
        required: true
  '/calendar/group/{groupId}':
    get:
      tags:
        - calendar
      summary: Find group by ID
      description: Input ID for search in group
      operationId: getGroupById
      parameters:
        - name: groupId
          in: path
          description: ID of group that needs to be find
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
            application/xml:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid ID griup
        '404':
          description: Group not found
    delete:
      tags:
        - calendar
      summary: Delete group by ID
      description: Delete group bu ID
      operationId: deleteOrder
      parameters:
        - name: groupId
          in: path
          description: ID of the group that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Invalid ID group
        '404':
          description: Group not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
      xml:
        name: User
    Event:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        date:
          type: string
          description: event date in the calendar
          enum:
            - available
            - pending
            - sold
        autor:
          type: integer
          format: int64
      xml:
        name: Event
    Group:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        users:
          type: integer
          format: int64
        event:
          type: integer
          format: int64
      xml:
        name: Group
            
  requestBodies:
    Event:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Event'
        application/xml:
          schema:
            $ref: '#/components/schemas/Event'
      description: Event object that needs to be added to the calendar
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    eventcalendar_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://eventcalendar.swagger.io/oauth/dialog'
          scopes:
            'write:events': modify events in your account
            'read:events': read your events
    api_key:
      type: apiKey
      name: api_key
      in: header
